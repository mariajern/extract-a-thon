"use client";

import type { GenerateInsightSummaryInput } from '@/ai/flows/generate-insight-summary';
import { generateInsightSummary } from '@/ai/flows/generate-insight-summary';
import { useEffect, useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { AlertCircle, CheckCircle, Loader2 } from 'lucide-react';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';

interface InsightSummaryProps {
  input: GenerateInsightSummaryInput;
  title?: string;
}

export default function InsightSummary({ input, title = "AI Powered Insights" }: InsightSummaryProps) {
  const [summary, setSummary] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    async function fetchSummary() {
      if (!input) return;
      setIsLoading(true);
      setError(null);
      setSummary(null);
      try {
        const result = await generateInsightSummary(input);
        setSummary(result.summary);
      } catch (e) {
        setError(e instanceof Error ? e.message : "An unknown error occurred.");
        console.error("Error generating insight summary:", e);
      } finally {
        setIsLoading(false);
      }
    }
    fetchSummary();
  }, [input]);

  return (
    <Card className="w-full bg-card/70 backdrop-blur-md shadow-lg border-border/50">
      <CardHeader>
        <CardTitle className="text-xl text-primary flex items-center">
          {isLoading && <Loader2 className="mr-2 h-5 w-5 animate-spin" />}
          {error && <AlertCircle className="mr-2 h-5 w-5 text-destructive" />}
          {!isLoading && !error && summary && <CheckCircle className="mr-2 h-5 w-5 text-green-500" />}
          {title}
        </CardTitle>
        <CardDescription className="text-muted-foreground">
          Contextual summary generated by AI based on the visualized data.
        </CardDescription>
      </CardHeader>
      <CardContent>
        {isLoading && (
          <div className="flex items-center justify-center p-4">
            <Loader2 className="h-8 w-8 animate-spin text-primary" />
            <p className="ml-2 text-muted-foreground">Generating summary...</p>
          </div>
        )}
        {error && (
          <Alert variant="destructive">
            <AlertCircle className="h-4 w-4" />
            <AlertTitle>Error</AlertTitle>
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        )}
        {summary && !isLoading && (
          <p className="text-foreground leading-relaxed">{summary}</p>
        )}
      </CardContent>
    </Card>
  );
}
